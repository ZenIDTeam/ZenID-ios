// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RecogLib_iOS
import AVFoundation
import CommonCrypto
import CoreGraphics
import CoreMedia
import CoreNFC
import CoreVideo
import CryptoKit
import CryptoTokenKit
import DeveloperToolsSupport
import Foundation
import OSLog
@_exported import RecogLib_iOS
import Swift
import SwiftUI
import UIKit.UIImage
import UIKit
import VideoToolbox
import WebKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
public protocol UnifiedVerifier {
  func verify(image: CoreVideo.CVPixelBuffer) -> (any RecogLib_iOS.UnifiedResult)?
}
public struct FaceLivenessResult {
  public var faceLivenessState: RecogLib_iOS.FaceLivenessVerifierState
  public let signature: RecogLib_iOS.ImageSignature?
}
public protocol VerifierRenderable {
  func getRenderCommands(canvasSize: CoreFoundation.CGSize) -> Swift.String?
}
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol ResultState {
  var isOk: Swift.Bool { get }
  var description: Swift.String { get }
}
@_hasMissingDesignatedInitializers public class BaseController<ResultType> where ResultType : RecogLib_iOS.ResultState {
  public var camera: RecogLib_iOS.Camera
  weak public var view: RecogLib_iOS.CameraView?
  @objc deinit
  public func start()
  public func stop()
}
extension RecogLib_iOS.BaseController : RecogLib_iOS.VideoWriterDelegate {
  public func didTakeVideo(_ videoAsset: AVFoundation.AVURLAsset)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : RecogLib_iOS.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
extension RecogLib_iOS.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension RecogLib_iOS.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum DocumentCodes : Swift.Int, Swift.CaseIterable {
  case IDC1
  case IDC2
  case DRV
  case PAS
  case SK_IDC_2008plus
  case SK_DRV_2004_08_09
  case SK_DRV_2013
  case SK_DRV_2015
  case SK_PAS_2008_14
  case SK_DRV_1993
  case PL_IDC_2015
  case DE_IDC_2010
  case DE_IDC_2001
  case HR_IDC_2013_15
  case AT_IDE_2000
  case HU_IDC_2000_01_12
  case HU_IDC_2016
  case AT_IDC_2002_05_10
  case HU_ADD_2012
  case AT_PAS_2006_14
  case AT_DRV_2006
  case AT_DRV_2013
  case CZ_RES_2011_14
  case CZ_RES_2006_T
  case CZ_RES_2006_07
  case CZ_GUN_2014
  case HU_PAS_2006_12
  case HU_DRV_2012_13
  case HU_DRV_2012_B
  case EU_EHIC_2004_A
  case Unknown
  case CZ_GUN_2017
  case CZ_RES_2020
  case PL_IDC_2019
  case IT_PAS_2006_10
  case INT_ISIC_2008
  case DE_PAS
  case DK_PAS
  case ES_PAS
  case FI_PAS
  case FR_PAS
  case GB_PAS
  case IS_PAS
  case NL_PAS
  case RO_PAS
  case SE_PAS
  case PL_PAS
  case PL_DRV_2013
  case CZ_BIRTH
  case CZ_VEHICLE_I
  case INT_ISIC_2019
  case SI_PAS
  case SI_IDC
  case SI_DRV
  case EU_EHIC_2004_B
  case PL_IDC_2001_02_13
  case IT_IDC_2016
  case HR_PAS_2009_15
  case HR_DRV_2013
  case HR_IDC_2003
  case SI_DRV_2009
  case BG_PAS_2010
  case BG_IDC_2010
  case BG_DRV_2010_13
  case HR_IDC_2021
  case AT_IDC_2021
  case DE_PAS_2007
  case DE_DRV_2013_21
  case DE_DRV_1999_01_04_11
  case FR_IDC_2021
  case FR_IDC_1988_94
  case ES_PAS_2003_06
  case ES_IDC_2015
  case ES_IDC_2006
  case IT_IDC_2004
  case RO_IDC_2001_06_09_17_21
  case NL_IDC_2014_17_21
  case BE_PAS_2014_17_19
  case BE_IDC_2013_15
  case BE_IDC_2020_21
  case GR_PAS_2020
  case PT_PAS_2006_09
  case PT_IDC_2007_08_09_15
  case SE_IDC_2012_21
  case FI_IDC_2017_21
  case IE_PAS_2006_13
  case LT_PAS_2008_09_11_19
  case LT_IDC_2009_12
  case LV_PAS_2015
  case LV_PAS_2007
  case LV_IDC_2012
  case LV_IDC_2019
  case EE_PAS_2014
  case EE_PAS_2021
  case EE_IDC_2011
  case EE_IDC_2018_21
  case CY_PAS_2010_20
  case CY_IDC_2000_08
  case CY_IDC_2015_20
  case LU_PAS_2015
  case LU_IDC_2014_21
  case LU_IDC_2008_13
  case MT_PAS_2008
  case MT_IDC_2014
  case PL_PAS_2011
  case PL_DRV_1999
  case LT_IDC_2021
  case UA_PAS_2007_15
  case UA_IDC_2017
  case EU_VIS_2019
  case UA_DRV_2016
  case UA_DRV_2005
  case UA_DRV_2021
  case EU_EHIC_2004_C
  case VN_PAS_2005
  case NL_DRV_2006
  case NL_DRV_2013
  case NL_DRV_2014
  case AL_PAS_2009
  case BA_PAS_2014
  case CH_PAS_2010
  case ME_PAS_2008
  case MK_PAS_2007
  case RS_PAS_2008
  case NO_PAS_2011_15
  case NO_PAS_2020
  case GB_PAS_2010_11_15_19
  case BY_PAS_2006
  case BY_PAS_2021
  case MD_PAS_2011_14_18
  case IS_PAS_2006
  case IN_PAS_2000_13
  case TR_PAS_2010
  case TR_PAS_2018
  case RO_IDC_2021sep
  case SK_RES_2011
  case SK_RES_2020
  case CZ_BIRTH_A2
  case CZ_BIRTH_A3
  case PL_DRV_1999_A2
  case DE_IDC_2010_A2
  case DE_IDC_2010_A3
  case PL_DRV_2013_A2
  case AT_IDC_2002_05_10_A2
  case CY_IDC_2015_20_A2
  case CY_IDC_2000_08_A2
  case CY_PAS_2010_20_A2
  case ES_PAS_2003_06_A2
  case LU_IDC_2008_13_A2
  case NL_IDC_2014_17_21_A2
  case CZ_BIRTH_A4
  case SK_IDC_2022
  case SE_IDC_2022
  case SE_PAS_2022
  case DK_PAS_2021
  case CH_PAS_2022
  case VN_PAS_2022
  case ME_PAS_2008_A2
  case CZ_RES_2020_A2
  case OL_IDC_2022
  case SM_PAS_2006
  case AD_PAS_2017
  case BE_PAS_2022
  case RU_PAS_2006_10
  case TR_PAS_2023
  case DO_IDC_2014
  case LI_PAS_2006
  case VA_PAS_2013
  case US_PAS_2006
  case JP_PAS_2013
  case PK_PAS_2022
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.DocumentCodes]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.DocumentCodes] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum PageCodes : Swift.Int, Swift.CaseIterable {
  case F
  case B
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.PageCodes]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.PageCodes] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum Country : Swift.Int, Swift.CaseIterable {
  case Cz
  case Sk
  case At
  case Hu
  case Pl
  case De
  case Hr
  case Ro
  case Ru
  case Ua
  case It
  case Dk
  case Es
  case Fi
  case Fr
  case Gb
  case Is
  case Nl
  case Se
  case Si
  case Bg
  case Al
  case Ad
  case Be
  case By
  case Ba
  case Me
  case Ee
  case Ie
  case Cy
  case Li
  case Lt
  case Lv
  case Lu
  case Mt
  case Md
  case Mc
  case No
  case Pt
  case Gr
  case Sm
  case Mk
  case Rs
  case Ch
  case Tr
  case Va
  case Vn
  case In
  case Us
  case Jp
  case Pk
  case Ng
  case Br
  case Bd
  case Cn
  case Id
  case Mx
  case Ol
  case Ph
  case Et
  case Eg
  case Cd
  case Ir
  case Th
  case Tz
  case Za
  case Mm
  case Co
  case Kr
  case Ke
  case Ar
  case Dz
  case Sd
  case Ug
  case Iq
  case Ca
  case Ma
  case Uz
  case Sa
  case Ye
  case Pe
  case Ao
  case My
  case Af
  case Mz
  case Gh
  case Ci
  case Np
  case Ve
  case Mg
  case Au
  case Kp
  case Cm
  case Ne
  case Tw
  case Ml
  case Bf
  case Lk
  case Sy
  case Mw
  case Cl
  case Kz
  case Zm
  case Ec
  case So
  case Sn
  case Gt
  case Td
  case Kh
  case Zw
  case Ss
  case Rw
  case Gn
  case Bi
  case Bj
  case Bo
  case Tn
  case Ht
  case Jo
  case Cu
  case Do
  case Az
  case Il
  case Tj
  case Hn
  case Ae
  case Sl
  case Tg
  case La
  case Kg
  case Tm
  case Ly
  case Sv
  case Ni
  case Py
  case Cg
  case Sg
  case Cf
  case Lb
  case Ps
  case Cr
  case Lr
  case Nz
  case Om
  case Kw
  case Mr
  case Pa
  case Er
  case Ge
  case Uy
  case Mn
  case Am
  case Jm
  case Qa
  case Na
  case Gm
  case Bw
  case Ls
  case Ga
  case Gw
  case Xk
  case Bh
  case Gq
  case Tt
  case Tl
  case Mu
  case Sz
  case Dj
  case Fj
  case Bt
  case Km
  case Gy
  case Sb
  case Sr
  case Cv
  case Bn
  case Bz
  case Bs
  case Mv
  case Vu
  case Bb
  case St
  case Ws
  case Lc
  case Ki
  case Gd
  case Vc
  case Fm
  case Ag
  case Sc
  case To
  case Dm
  case Kn
  case Mh
  case Pw
  case Nr
  case Tv
  case Pg
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.Country]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.Country] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum DocumentRole : Swift.Int, Swift.CaseIterable {
  case Idc
  case Pas
  case Drv
  case Res
  case Gun
  case Hic
  case Std
  case Car
  case Birth
  case Add
  case Ide
  case Vis
  case Exp
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.DocumentRole]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.DocumentRole] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum SupportedLanguages : Swift.Int, Swift.CaseIterable {
  case English
  case Czech
  case Polish
  case German
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.SupportedLanguages]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.SupportedLanguages] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum DocumentVerifierState : Swift.Int, Swift.CaseIterable {
  case NoMatchFound
  case AlignCard
  case HoldSteady
  case Blurry
  case ReflectionPresent
  case Ok
  case Hologram
  case Dark
  case Barcode
  case TextNotReadable
  case Nfc
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.DocumentVerifierState]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.DocumentVerifierState] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum SelfieVerifierState : Swift.Int, Swift.CaseIterable {
  case Ok
  case NoFaceFound
  case Blurry
  case Dark
  case ConfirmingFace
  case BadFaceAngle
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.SelfieVerifierState]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.SelfieVerifierState] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum HologramState : Swift.Int, Swift.CaseIterable {
  case Center
  case TiltLeftAndRight
  case TiltUpAndDown
  case Ok
  case TimedOut
  case TiltLeft
  case TiltRight
  case TiltUp
  case TiltDown
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.HologramState]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.HologramState] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum FaceLivenessVerifierState : Swift.Int, Swift.CaseIterable {
  case LookAtMe
  case TurnHead
  case Smile
  case Ok
  case Blurry
  case Dark
  case HoldStill
  case Reseting
  case DontSmile
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.FaceLivenessVerifierState]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.FaceLivenessVerifierState] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum SampleType : Swift.Int, Swift.CaseIterable {
  case DocumentPicture
  case Selfie
  case SelfieVideo
  case DocumentVideo
  case Archived
  case Unknown
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.SampleType]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.SampleType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum SdkVerifierType : Swift.Int, Swift.CaseIterable {
  case FaceLiveness
  case Document
  case Selfie
  case Hologram
  case IQSHologram
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.SdkVerifierType]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.SdkVerifierType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum SdkSignatureProblem : Swift.Int, Swift.CaseIterable {
  case HashDiffers
  case TimeDiffers
  case HostnameNotAllowed
  case AndroidPackageNotAllowed
  case IosBundleNotAllowed
  case OfflineTokenUsed
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.SdkSignatureProblem]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.SdkSignatureProblem] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum DataType {
  case picture
  case video
  public static func == (a: RecogLib_iOS.DataType, b: RecogLib_iOS.DataType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class Camera : ObjectiveC.NSObject {
  final public func isCaptureSessionRunning() -> Swift.Bool
  final public func setOrientation(orientation: UIKit.UIInterfaceOrientation? = nil)
  final public func setTorch(on: Swift.Bool? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension RecogLib_iOS.Camera : AVFoundation.AVCapturePhotoCaptureDelegate {
  @objc final public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: (any Swift.Error)?)
}
extension RecogLib_iOS.Camera : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc final public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension RecogLib_iOS.Camera {
  @available(iOS 15.0, *)
  public static func setRecommendedZoomFactor(for device: AVFoundation.AVCaptureDevice, subjectSize: Swift.Float = 110)
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: RecogLib_iOS.DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : RecogLib_iOS.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DataGroup14 : RecogLib_iOS.DataGroup {
  @objc deinit
}
public enum ZenFont {
}
extension UIKit.UIFont {
  public static let dtitle: UIKit.UIFont
  public static let darkTitle: UIKit.UIFont
  public static let darkDescription: UIKit.UIFont
  public static let buttonFont: UIKit.UIFont
  public static let bigTitle: UIKit.UIFont
  public static let title: UIKit.UIFont
  public static let version: UIKit.UIFont
  public static let topLabel: UIKit.UIFont
  public static let messageLabel: UIKit.UIFont
  public static let pagesCountLabel: UIKit.UIFont
  public static let resultTitle: UIKit.UIFont
  public static let resultValue: UIKit.UIFont
}
@objc public class NfcDocumentReader : ObjectiveC.NSObject, RecogLib_iOS.NfcDocumentReaderProtocol {
  public init(mrzKey: Swift.String, displayMessageProvider: (any RecogLib_iOS.NfcDisplayMessageProvider)? = nil)
  @objc deinit
  #if compiler(>=5.3) && $AsyncAwait
  public func read() async throws -> RecogLib_iOS.NfcData
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func read(skipSecureElements: Swift.Bool = true, skipPACE: Swift.Bool = false) async throws -> RecogLib_iOS.NfcData
  #endif
}
@available(iOS 13, *)
extension RecogLib_iOS.NfcDocumentReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@available(iOS 13, *)
extension RecogLib_iOS.NfcDocumentReader {
  public func invalidateSession(errorMessage: RecogLib_iOS.NFCDisplayMessage, error: RecogLib_iOS.NfcDocumentReaderError)
}
public struct MrzFields : Swift.Decodable {
  public let BirthDate: Swift.String
  public let DocumentNumber: Swift.String
  public let ExpiryDate: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class ZenidSecurity {
  public static func getChallengeToken() -> Swift.String?
  public static func authorize(responseToken: Swift.String) -> Swift.Bool
  public static func isAuthorized() -> Swift.Bool
  public static func selectProfile(name: Swift.String) -> Swift.Bool
  public static func supportedCountries() -> [RecogLib_iOS.Country]?
  public static func supportedDocuments(for country: RecogLib_iOS.Country) -> [RecogLib_iOS.DocumentRole]?
  public static func supportedDocumentPageCodes(for country: RecogLib_iOS.Country, documentRole: RecogLib_iOS.DocumentRole) -> [RecogLib_iOS.PageCodes]?
  public static let DEFAULT_PROFILE_NAME: Swift.String
  public static let NFC_PROFILE_NAME: Swift.String
  @objc deinit
}
final public class UnifiedDocumentVerifierAdapter : RecogLib_iOS.UnifiedVerifier {
  public init(verifier: RecogLib_iOS.DocumentVerifier, orientation: UIKit.UIInterfaceOrientation)
  final public func verify(image: CoreVideo.CVPixelBuffer) -> (any RecogLib_iOS.UnifiedResult)?
  @objc deinit
}
extension RecogLib_iOS.UnifiedDocumentVerifierAdapter : RecogLib_iOS.VerifierRenderable {
  final public func getRenderCommands(canvasSize: CoreFoundation.CGSize) -> Swift.String?
}
public func LocalizedString(_ key: Swift.String, tableName: Swift.String? = nil, value: Swift.String = "", comment: Swift.String? = nil) -> Swift.String
public class SelfieVerifier {
  public var language: RecogLib_iOS.SupportedLanguages
  public var showDebugInfo: Swift.Bool {
    get
    set
  }
  public init(language: RecogLib_iOS.SupportedLanguages)
  public func loadModels(_ loader: RecogLib_iOS.FaceVerifierModels)
  @objc deinit
  public func verify(buffer: CoreMedia.CMSampleBuffer, orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.SelfieResult?
  public func verifyImage(imageBuffer: CoreVideo.CVPixelBuffer, orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.SelfieResult?
  public func reset()
  public func getRenderCommands(canvasWidth: Swift.Int, canvasHeight: Swift.Int, orientation: UIKit.UIInterfaceOrientation = .portrait) -> Swift.String?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : RecogLib_iOS.DataGroup {
  @objc deinit
}
public struct FaceLivenessStepParameters : Swift.Decodable {
  public let faceCenterX: Swift.Double
  public let faceCenterY: Swift.Double
  public let faceHeight: Swift.Double
  public let faceWidth: Swift.Double
  public let hasFailed: Swift.Bool
  public let headPitch: Swift.Double
  public let headRoll: Swift.Double
  public let headYaw: Swift.Double
  public let name: Swift.String
  public let passedCheckCount: Swift.Int
  public let totalCheckCount: Swift.Int
  public init(from decoder: any Swift.Decoder) throws
}
final public class UnifiedDocumentResultAdapter : RecogLib_iOS.UnifiedResult {
  final public let state: RecogLib_iOS.UnifiedState
  final public let role: RecogLib_iOS.DocumentRole?
  final public let country: RecogLib_iOS.Country?
  final public let code: RecogLib_iOS.DocumentCodes?
  final public let page: RecogLib_iOS.PageCodes?
  final public let signature: RecogLib_iOS.ImageSignature?
  public init(result: RecogLib_iOS.DocumentResult)
  @objc deinit
}
extension RecogLib_iOS.DocumentVerifierState {
  public func toDomain() -> RecogLib_iOS.UnifiedState
}
public class FaceLivenessVerifier {
  public var language: RecogLib_iOS.SupportedLanguages
  public var showDebugInfo: Swift.Bool {
    get
    set
  }
  public init(language: RecogLib_iOS.SupportedLanguages, settings: RecogLib_iOS.FaceLivenessVerifierSettings? = nil)
  @objc deinit
  public func loadModels(_ loader: RecogLib_iOS.FaceVerifierModels)
  public func verify(buffer: CoreMedia.CMSampleBuffer, orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.FaceLivenessResult?
  public func verifyImage(imageBuffer: CoreVideo.CVPixelBuffer, orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.FaceLivenessResult?
  public func update(settings: RecogLib_iOS.FaceLivenessVerifierSettings)
  public func getAuxiliaryInfo() -> RecogLib_iOS.FaceLivenessAuxiliaryInfo?
  public func reset()
  public func getRenderCommands(canvasWidth: Swift.Int, canvasHeight: Swift.Int, orientation: UIKit.UIInterfaceOrientation = .portrait) -> Swift.String?
  public func getStepParameters() -> RecogLib_iOS.FaceLivenessStepParameters?
  public func getRequiredFPS() -> Swift.Int
  public func getRequiredResolution() -> Swift.Int
  public func getLivenessResult(orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.FaceLivenessResult?
}
public protocol UnifiedResult {
  var state: RecogLib_iOS.UnifiedState { get }
  var role: RecogLib_iOS.DocumentRole? { get }
  var country: RecogLib_iOS.Country? { get }
  var code: RecogLib_iOS.DocumentCodes? { get }
  var page: RecogLib_iOS.PageCodes? { get }
  var signature: RecogLib_iOS.ImageSignature? { get }
}
public class DocumentVerifier {
  public var documentRole: RecogLib_iOS.DocumentRole?
  public var country: RecogLib_iOS.Country?
  public var page: RecogLib_iOS.PageCodes?
  public var code: RecogLib_iOS.DocumentCodes?
  final public let settings: RecogLib_iOS.DocumentVerifierSettings?
  public var documentsInput: RecogLib_iOS.DocumentsInput? {
    get
    set
  }
  public var language: RecogLib_iOS.SupportedLanguages
  public var showDebugInfo: Swift.Bool {
    get
    set
  }
  public init(role: RecogLib_iOS.DocumentRole?, country: RecogLib_iOS.Country?, page: RecogLib_iOS.PageCodes?, code: RecogLib_iOS.DocumentCodes?, language: RecogLib_iOS.SupportedLanguages, settings: RecogLib_iOS.DocumentVerifierSettings? = nil)
  public init(input: RecogLib_iOS.DocumentsInput, language: RecogLib_iOS.SupportedLanguages, settings: RecogLib_iOS.DocumentVerifierSettings? = nil)
  @objc deinit
  public func loadModels(_ loader: RecogLib_iOS.DocumentVerifierModels, mrzModelsPath: Foundation.URL? = nil)
  public func verify(buffer: CoreMedia.CMSampleBuffer, orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.DocumentResult?
  public func verifyImage(imageBuffer: CoreVideo.CVPixelBuffer, orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.DocumentResult?
  public func update(settings: RecogLib_iOS.DocumentVerifierSettings)
  public func validate(input: RecogLib_iOS.DocumentsInput) -> Swift.Bool
  public func beginHologramVerification()
  public func endHologramVerification()
  public func reset()
  public func getRenderCommands(canvasWidth: Swift.Int, canvasHeight: Swift.Int, orientation: UIKit.UIInterfaceOrientation = .portrait) -> Swift.String?
  public func getRequiredFPS() -> Swift.Int
  public func getRequiredResolution() -> Swift.Int
  public func getNfcKey() -> Swift.String?
  public func getMrzFields() -> RecogLib_iOS.MrzFields?
  public func processNfc(jsonData: Swift.String, status: RecogLib_iOS.NfcStatus)
  public func getState() -> RecogLib_iOS.DocumentVerifierState?
  public func getSignedImage() -> RecogLib_iOS.ImageSignature?
  public func getNfcValidatorSettings() -> RecogLib_iOS.DocumentVerifierNfcValidatorSettings
  public func getDocumentResult(orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.DocumentResult?
  public func getSettings() -> RecogLib_iOS.DocumentVerifierSettings
}
public struct NfcUtils {
  public static func getMRZKey(documentNumber: Swift.String, dateOfBirth: Swift.String, dateOfExpiry: Swift.String) -> Swift.String
}
public class NFCDocumentModel : RecogLib_iOS.NFCDocumentModelType {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var residenceAddress: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [RecogLib_iOS.DataGroupId] {
    get
  }
  public var dataGroupsRead: [RecogLib_iOS.DataGroupId : RecogLib_iOS.DataGroup] {
    get
  }
  public var BACAuthStatus: RecogLib_iOS.AuthenticationStatus {
    get
  }
  public var PACEAuthStatus: RecogLib_iOS.AuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: RecogLib_iOS.AuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [any Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public init()
  public func addDataGroup(_ id: RecogLib_iOS.DataGroupId, dataGroup: RecogLib_iOS.DataGroup)
  public func getDataGroupData(_ groupId: RecogLib_iOS.DataGroupId) -> [Swift.UInt8]?
  public func getEncodedDataGroup(_ groupId: RecogLib_iOS.DataGroupId) -> Swift.String?
  @objc deinit
}
public struct NfcData {
  public let DataGroups: [RecogLib_iOS.DataGroupId : Swift.String]
  public let ProtocolUsed: RecogLib_iOS.NfcData.NfcProtocol
  public let document: (any RecogLib_iOS.NFCDocumentModelType)?
  public init(document: any RecogLib_iOS.NFCDocumentModelType)
}
extension RecogLib_iOS.NfcData : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension RecogLib_iOS.NfcData {
  public enum NfcProtocol : Swift.Int, Swift.Encodable {
    case PACE
    case BAC
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension RecogLib_iOS.NfcData {
  public enum DGName : Swift.Int, Swift.CaseIterable {
    case COM
    case SOD
    case DG1
    case DG2
    case DG3
    case DG4
    case DG5
    case DG6
    case DG7
    case DG8
    case DG9
    case DG10
    case DG11
    case DG12
    case DG13
    case DG14
    case DG15
    case DG16
    case UNKNOWN
    public func getName() -> Swift.String
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [RecogLib_iOS.NfcData.DGName]
    public typealias RawValue = Swift.Int
    public static var allCases: [RecogLib_iOS.NfcData.DGName] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension RecogLib_iOS.NfcData.DGName : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct DocumentControllerConfiguration {
  public static let `default`: RecogLib_iOS.DocumentControllerConfiguration
  public let showVisualisation: Swift.Bool
  public let showHelperVisualisation: Swift.Bool
  public let showDebugVisualisation: Swift.Bool
  public let showTextInstructions: Swift.Bool
  public let dataType: RecogLib_iOS.DataType
  public let role: RecogLib_iOS.DocumentRole?
  public let country: RecogLib_iOS.Country?
  public let page: RecogLib_iOS.PageCodes?
  public let code: RecogLib_iOS.DocumentCodes?
  public let documents: [RecogLib_iOS.Document]?
  public let settings: RecogLib_iOS.DocumentVerifierSettings?
  public init(showVisualisation: Swift.Bool, showHelperVisualisation: Swift.Bool, showDebugVisualisation: Swift.Bool, showTextInstructions: Swift.Bool = true, dataType: RecogLib_iOS.DataType, role: RecogLib_iOS.DocumentRole?, country: RecogLib_iOS.Country?, page: RecogLib_iOS.PageCodes?, code: RecogLib_iOS.DocumentCodes?, documents: [RecogLib_iOS.Document]?, settings: RecogLib_iOS.DocumentVerifierSettings?)
}
extension RecogLib_iOS.DocumentResult : RecogLib_iOS.ResultState {
  public var isOk: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public protocol DocumentControllerDelegate : AnyObject {
  func controller(_ controller: RecogLib_iOS.DocumentController, didScan result: RecogLib_iOS.DocumentResult, nfcCode: Swift.String)
  func controller(_ controller: RecogLib_iOS.DocumentController, didScan result: RecogLib_iOS.DocumentResult)
  func controller(_ controller: RecogLib_iOS.DocumentController, didRecord videoURL: Foundation.URL)
  func controller(_ controller: RecogLib_iOS.DocumentController, didUpdate result: RecogLib_iOS.DocumentResult)
}
public protocol DocumentControllerAbstraction {
  var delegate: (any RecogLib_iOS.DocumentControllerDelegate)? { get set }
  func configure(configuration: RecogLib_iOS.DocumentControllerConfiguration) throws
}
@_hasMissingDesignatedInitializers final public class DocumentController : RecogLib_iOS.BaseController<RecogLib_iOS.DocumentResult>, RecogLib_iOS.DocumentControllerAbstraction {
  weak final public var delegate: (any RecogLib_iOS.DocumentControllerDelegate)?
  public init(camera: RecogLib_iOS.Camera, view: RecogLib_iOS.CameraView, modelsUrl: Foundation.URL, mrzModelsUrl: Foundation.URL?, language: RecogLib_iOS.SupportedLanguages = SupportedLanguages.current)
  @objc deinit
  final public func configure(configuration: RecogLib_iOS.DocumentControllerConfiguration = .default) throws
  final public func processNfcResult(nfcData: RecogLib_iOS.NfcData, status: RecogLib_iOS.NfcStatus) -> RecogLib_iOS.DocumentResult?
  final public func skipNfcResult() -> RecogLib_iOS.DocumentResult?
  final public func getSignedImage() -> RecogLib_iOS.ImageSignature?
  final public func getNfcSettings() -> RecogLib_iOS.DocumentVerifierNfcValidatorSettings
  final public func getDocumentResult(orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.DocumentResult?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : RecogLib_iOS.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
public protocol LoggerProtocol {
  func Error(_ message: Swift.String)
  func Warn(_ message: Swift.String)
  func Info(_ message: Swift.String)
  func Debug(_ message: Swift.String)
  func Verbose(_ message: Swift.String)
}
@_hasMissingDesignatedInitializers final public class ApplicationLogger {
  public static let shared: RecogLib_iOS.ApplicationLogger
  final public func startLogging(logger: any RecogLib_iOS.LoggerProtocol)
  final public func Error(_ message: Swift.String)
  final public func Warn(_ message: Swift.String)
  final public func Info(_ message: Swift.String)
  final public func Debug(_ message: Swift.String)
  final public func Verbose(_ message: Swift.String)
  final public func disableRecognitionLogging()
  final public func enableRecognitionLogging()
  @objc deinit
}
public struct FaceLivenessVerifierSettings : Swift.Equatable {
  public let isLegacyModeEnabled: Swift.Bool
  public let maxAuxiliaryImageSize: Swift.Int
  public let visualizerVersion: Swift.Int
  public init(isLegacyModeEnabled: Swift.Bool = false, maxAuxiliaryImageSize: Swift.Int = 300, visualizerVersion: Swift.Int = 1)
  public static func == (a: RecogLib_iOS.FaceLivenessVerifierSettings, b: RecogLib_iOS.FaceLivenessVerifierSettings) -> Swift.Bool
}
public enum AuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: RecogLib_iOS.AuthenticationStatus, b: RecogLib_iOS.AuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol NFCDocumentModelType {
  var activeAuthenticationPassed: Swift.Bool { get }
  var BACAuthStatus: RecogLib_iOS.AuthenticationStatus { get }
  var isPACESupported: Swift.Bool { get }
  var PACEAuthStatus: RecogLib_iOS.AuthenticationStatus { get }
  var passportCorrectlySigned: Swift.Bool { get }
  var documentSigningCertificateVerified: Swift.Bool { get }
  var passportDataNotTampered: Swift.Bool { get }
  var passportMRZ: Swift.String { get }
  var passportImage: UIKit.UIImage? { get }
  var signatureImage: UIKit.UIImage? { get }
  var firstName: Swift.String { get }
  var lastName: Swift.String { get }
  var nationality: Swift.String { get }
  var gender: Swift.String { get }
  var dateOfBirth: Swift.String { get }
  var personalNumber: Swift.String? { get }
  var documentExpiryDate: Swift.String { get }
  var documentNumber: Swift.String { get }
  var documentType: Swift.String { get }
  var documentSubType: Swift.String { get }
  var issuingAuthority: Swift.String { get }
  var LDSVersion: Swift.String { get }
  var dataGroupsPresent: [Swift.String] { get }
  var dataGroupsAvailable: [RecogLib_iOS.DataGroupId] { get }
  func getDataGroupData(_ groupId: RecogLib_iOS.DataGroupId) -> [Swift.UInt8]?
  func getEncodedDataGroup(_ groupId: RecogLib_iOS.DataGroupId) -> Swift.String?
}
public protocol VideoWriterDelegate : AnyObject {
  func didTakeVideo(_ videoAsset: AVFoundation.AVURLAsset)
}
final public class UnifiedSelfieResultAdapter : RecogLib_iOS.UnifiedResult {
  final public let state: RecogLib_iOS.UnifiedState
  final public let role: RecogLib_iOS.DocumentRole?
  final public let country: RecogLib_iOS.Country?
  final public let code: RecogLib_iOS.DocumentCodes?
  final public let page: RecogLib_iOS.PageCodes?
  final public let signature: RecogLib_iOS.ImageSignature?
  public init(result: RecogLib_iOS.SelfieResult)
  @objc deinit
}
extension RecogLib_iOS.SelfieVerifierState {
  public func toDomain() -> RecogLib_iOS.UnifiedState
}
public enum FaceLivenessCheckType : Swift.String, Swift.Decodable {
  case angle
  case legacyAngle
  case smile
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FaceLivenessAngle : Swift.String, Swift.Decodable {
  case left
  case top
  case right
  case down
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct FaceLivenessAuxiliaryMetadata : Swift.Decodable {
  public let type: RecogLib_iOS.FaceLivenessCheckType
  public let date: Foundation.Date
  public let angle: RecogLib_iOS.FaceLivenessAngle?
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaceLivenessAuxiliaryInfo {
  public let images: [Foundation.Data]
  public let metadata: [RecogLib_iOS.FaceLivenessAuxiliaryMetadata]
}
final public class UnifiedFacelivenessVerifierAdapter : RecogLib_iOS.UnifiedVerifier {
  public init(verifier: RecogLib_iOS.FaceLivenessVerifier)
  final public func verify(image: CoreVideo.CVPixelBuffer) -> (any RecogLib_iOS.UnifiedResult)?
  @objc deinit
}
extension RecogLib_iOS.UnifiedFacelivenessVerifierAdapter : RecogLib_iOS.VerifierRenderable {
  final public func getRenderCommands(canvasSize: CoreFoundation.CGSize) -> Swift.String?
}
public struct DocumentVerifierSettings : Swift.Equatable {
  public let showTimer: Swift.Bool
  public let showAimingCircle: Swift.Bool
  public let drawOutline: Swift.Bool
  public let visualizerVersion: Swift.Int
  public init(showTimer: Swift.Bool = false, showAimingCircle: Swift.Bool = false, drawOutline: Swift.Bool = true, visualizerVersion: Swift.Int = 1)
  public static func == (a: RecogLib_iOS.DocumentVerifierSettings, b: RecogLib_iOS.DocumentVerifierSettings) -> Swift.Bool
}
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
public enum RenderableType : Swift.String {
  case line
  case rectangle
  case circle
  case ellipse
  case text
  case triangle
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RenderableFactory {
  public static func createRenderables(commands: Swift.String, showTextInstructions: Swift.Bool = false) -> [any RecogLib_iOS.Renderable]
  public static func createRenderable<T>(command: T, showTextInstructions: Swift.Bool) -> (any RecogLib_iOS.Renderable)? where T : Swift.StringProtocol
  @objc deinit
}
final public class UnifiedFacelivenessResultAdapter : RecogLib_iOS.UnifiedResult {
  final public let state: RecogLib_iOS.UnifiedState
  final public let role: RecogLib_iOS.DocumentRole?
  final public let country: RecogLib_iOS.Country?
  final public let code: RecogLib_iOS.DocumentCodes?
  final public let page: RecogLib_iOS.PageCodes?
  final public let signature: RecogLib_iOS.ImageSignature?
  public init(result: RecogLib_iOS.FaceLivenessResult)
  @objc deinit
}
public enum NfcStatus : Swift.Int {
  case DEVICE_DOES_NOT_SUPPORT_NFC
  case INVALID_NFC_KEY
  case USER_SKIPPED
  case OK
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class CameraView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var videoGravity: AVFoundation.AVLayerVideoGravity
  @_Concurrency.MainActor(unsafe) final public var ignoreSafeArea: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TagReader {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : RecogLib_iOS.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
extension RecogLib_iOS.SupportedLanguages {
  public static var current: RecogLib_iOS.SupportedLanguages {
    get
  }
  public static func language(from locale: Foundation.Locale) -> RecogLib_iOS.SupportedLanguages
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : RecogLib_iOS.DataGroup {
  @objc deinit
}
public enum RenderingPriority {
  case low
  case high
  public static func == (a: RecogLib_iOS.RenderingPriority, b: RecogLib_iOS.RenderingPriority) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Renderable {
  var priority: RecogLib_iOS.RenderingPriority { get }
  init?(_ renderCommand: Swift.String)
  func draw(in ctx: CoreGraphics.CGContext)
}
extension RecogLib_iOS.Renderable {
  public var priority: RecogLib_iOS.RenderingPriority {
    get
  }
}
extension RecogLib_iOS.DocumentVerifierState {
  public var localizedDescription: Swift.String {
    get
  }
}
extension RecogLib_iOS.HologramState {
  public var localizedDescription: Swift.String {
    get
  }
}
extension RecogLib_iOS.FaceLivenessVerifierState {
  public var localizedDescription: Swift.String {
    get
  }
}
extension RecogLib_iOS.SelfieVerifierState {
  public var localizedDescription: Swift.String {
    get
  }
}
extension RecogLib_iOS.FaceLivenessResult : RecogLib_iOS.ResultState {
  public var isOk: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public struct FacelivenessControllerConfiguration {
  public static let `default`: RecogLib_iOS.FacelivenessControllerConfiguration
  public let showVisualisation: Swift.Bool
  public let showHelperVisualisation: Swift.Bool
  public let showDebugVisualisation: Swift.Bool
  public let showTextInstructions: Swift.Bool
  public let dataType: RecogLib_iOS.DataType
  public let settings: RecogLib_iOS.FaceLivenessVerifierSettings
  public init(showVisualisation: Swift.Bool, showHelperVisualisation: Swift.Bool, showDebugVisualisation: Swift.Bool, showTextInstructions: Swift.Bool = true, dataType: RecogLib_iOS.DataType, settings: RecogLib_iOS.FaceLivenessVerifierSettings)
}
public protocol FacelivenessControllerDelegate : AnyObject {
  func controller(_ controller: RecogLib_iOS.FacelivenessController, didScan result: RecogLib_iOS.FaceLivenessResult)
  func controller(_ controller: RecogLib_iOS.FacelivenessController, didRecord videoURL: Foundation.URL, result: RecogLib_iOS.FaceLivenessResult)
  func controller(_ controller: RecogLib_iOS.FacelivenessController, didUpdate result: RecogLib_iOS.FaceLivenessResult)
}
public protocol FacelivenessControllerAbstraction {
  var delegate: (any RecogLib_iOS.FacelivenessControllerDelegate)? { get set }
  func configure(configuration: RecogLib_iOS.FacelivenessControllerConfiguration) throws
}
@_hasMissingDesignatedInitializers final public class FacelivenessController : RecogLib_iOS.BaseController<RecogLib_iOS.FaceLivenessResult>, RecogLib_iOS.FacelivenessControllerAbstraction {
  weak final public var delegate: (any RecogLib_iOS.FacelivenessControllerDelegate)?
  public init(camera: RecogLib_iOS.Camera, view: RecogLib_iOS.CameraView, modelsUrl: Foundation.URL, language: RecogLib_iOS.SupportedLanguages = SupportedLanguages.current)
  final public func configure(configuration: RecogLib_iOS.FacelivenessControllerConfiguration = .default) throws
  final public func getAuxiliaryImages() -> RecogLib_iOS.FaceLivenessAuxiliaryInfo?
  @objc deinit
}
public class DocumentsInput {
  public init(documents: [RecogLib_iOS.Document])
  @objc deinit
}
public enum NFCDisplayMessage {
  case requestPresent
  case authenticatingWith(Swift.Int)
  case readingDataGroupProgress(RecogLib_iOS.DataGroupId, Swift.Int)
  case error(RecogLib_iOS.NfcDocumentReaderError)
  case successfullRead
}
public struct DocumentResult {
  public var state: RecogLib_iOS.DocumentVerifierState
  public var role: RecogLib_iOS.DocumentRole?
  public var country: RecogLib_iOS.Country?
  public var code: RecogLib_iOS.DocumentCodes?
  public var page: RecogLib_iOS.PageCodes?
  public var hologramState: RecogLib_iOS.HologramState?
  public var signature: RecogLib_iOS.ImageSignature?
}
final public class UnifiedSelfieVerifierAdapter : RecogLib_iOS.UnifiedVerifier {
  public init(verifier: RecogLib_iOS.SelfieVerifier)
  final public func verify(image: CoreVideo.CVPixelBuffer) -> (any RecogLib_iOS.UnifiedResult)?
  @objc deinit
}
extension RecogLib_iOS.UnifiedSelfieVerifierAdapter : RecogLib_iOS.VerifierRenderable {
  final public func getRenderCommands(canvasSize: CoreFoundation.CGSize) -> Swift.String?
}
final public class DocumentVerifierModels : RecogLib_iOS.VerifierModels {
  final public let url: Foundation.URL
  public init?(url: Foundation.URL, fileManager: Foundation.FileManager = .default)
  final public func load(onLoad: (Foundation.Data, Swift.String) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup12 : RecogLib_iOS.DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  @objc deinit
}
public enum NfcDocumentReaderError : Swift.Error, Swift.Equatable {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case UnsupportedCipherAlgorithm
  case UnsupportedMappingType
  case PACEError(Swift.String, Swift.String)
  case ChipAuthenticationFailed
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
  case LostConnection
  case NativeNfcError(Foundation.NSError)
  public static func == (lhs: RecogLib_iOS.NfcDocumentReaderError, rhs: RecogLib_iOS.NfcDocumentReaderError) -> Swift.Bool
}
public struct DocumentVerifierNfcValidatorSettings {
  public let numberOfReadingAttempts: Swift.Int
  public let skipNfcAllowed: Swift.Bool
  public let noNfcMeansError: Swift.Bool
  public let isEnabled: Swift.Bool
  public let acceptScore: Swift.Int
  public let scoreStep: Swift.Int
  public let isTestEnabled: Swift.Bool
}
extension RecogLib_iOS.DocumentCodes {
  public init?(stringValue: Swift.String)
}
extension RecogLib_iOS.DocumentCodes {
  public var description: Swift.String {
    get
  }
}
extension RecogLib_iOS.PageCodes {
  public var description: Swift.String {
    get
  }
}
extension RecogLib_iOS.Country {
  public var description: Swift.String {
    get
  }
}
extension RecogLib_iOS.DocumentRole {
  public var description: Swift.String {
    get
  }
  public var descriptionOld: Swift.String {
    get
  }
}
extension RecogLib_iOS.SupportedLanguages {
  public var description: Swift.String {
    get
  }
}
extension RecogLib_iOS.DocumentVerifierState {
  public var description: Swift.String {
    get
  }
}
extension RecogLib_iOS.HologramState {
  public var description: Swift.String {
    get
  }
}
extension RecogLib_iOS.FaceLivenessVerifierState {
  public var description: Swift.String {
    get
  }
}
extension RecogLib_iOS.SelfieVerifierState {
  public var description: Swift.String {
    get
  }
}
public protocol VerifierModels {
  var url: Foundation.URL { get }
  func load(onLoad: (Foundation.Data, Swift.String) -> Swift.Void)
}
public protocol NfcDocumentReaderProtocol {
  #if compiler(>=5.3) && $AsyncAwait
  func read() async throws -> RecogLib_iOS.NfcData
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func read(skipSecureElements: Swift.Bool, skipPACE: Swift.Bool) async throws -> RecogLib_iOS.NfcData
  #endif
}
public struct Document : Swift.Comparable {
  public static func < (lhs: RecogLib_iOS.Document, rhs: RecogLib_iOS.Document) -> Swift.Bool
  public let role: RecogLib_iOS.DocumentRole?
  public let country: RecogLib_iOS.Country?
  public let page: RecogLib_iOS.PageCodes?
  public let code: RecogLib_iOS.DocumentCodes?
  public init(role: RecogLib_iOS.DocumentRole?, country: RecogLib_iOS.Country?, page: RecogLib_iOS.PageCodes?, code: RecogLib_iOS.DocumentCodes?)
  public static func == (a: RecogLib_iOS.Document, b: RecogLib_iOS.Document) -> Swift.Bool
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
public func mac(algoName: RecogLib_iOS.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
public enum ImageFlip : Swift.Int {
  case none
  case fromLandScape
  case fromPortrait
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIKit.UIImage {
  convenience public init?(pixelBuffer: CoreVideo.CVPixelBuffer, crop: CoreFoundation.CGRect? = nil)
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  public static func == (a: RecogLib_iOS.SecureMessagingSupportedAlgorithms, b: RecogLib_iOS.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class SecureMessaging {
  public init(encryptionAlgorithm: RecogLib_iOS.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
public struct ImageSignature {
  public let image: Foundation.Data
  public let signature: Swift.String
  public func croppedImagePreview(toFit size: CoreFoundation.CGSize) -> UIKit.UIImage?
}
public protocol NfcDisplayMessageProvider {
  func message(for: RecogLib_iOS.NFCDisplayMessage) -> Swift.String
}
public struct DefaultMesageProvider : RecogLib_iOS.NfcDisplayMessageProvider {
  public func message(for displayMessage: RecogLib_iOS.NFCDisplayMessage) -> Swift.String
  public func handleProgress(percentualProgress: Swift.Int) -> Swift.String
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : RecogLib_iOS.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init(tagReader: RecogLib_iOS.TagReader)
  #if compiler(>=5.3) && $AsyncAwait
  public func performBACAndGetSessionKeys(mrzKey: Swift.String) async throws
  #endif
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
public struct SelfieResult {
  public var selfieState: RecogLib_iOS.SelfieVerifierState
  public let signature: RecogLib_iOS.ImageSignature?
}
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
extension RecogLib_iOS.SelfieResult : RecogLib_iOS.ResultState {
  public var isOk: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public struct SelfieControllerConfiguration {
  public static let `default`: RecogLib_iOS.SelfieControllerConfiguration
  public let showVisualisation: Swift.Bool
  public let showHelperVisualisation: Swift.Bool
  public let showDebugVisualisation: Swift.Bool
  public let showTextInstructions: Swift.Bool
  public let dataType: RecogLib_iOS.DataType
  public init(showVisualisation: Swift.Bool, showHelperVisualisation: Swift.Bool, showDebugVisualisation: Swift.Bool, showTextInstructions: Swift.Bool = true, dataType: RecogLib_iOS.DataType)
}
public protocol SelfieControllerDelegate : AnyObject {
  func controller(_ controller: RecogLib_iOS.SelfieController, didScan result: RecogLib_iOS.SelfieResult)
  func controller(_ controller: RecogLib_iOS.SelfieController, didRecord videoURL: Foundation.URL)
  func controller(_ controller: RecogLib_iOS.SelfieController, didUpdate result: RecogLib_iOS.SelfieResult)
}
public protocol SelfieControllerAbstraction {
  var delegate: (any RecogLib_iOS.SelfieControllerDelegate)? { get set }
  func configure(configuration: RecogLib_iOS.SelfieControllerConfiguration) throws
}
@_hasMissingDesignatedInitializers final public class SelfieController : RecogLib_iOS.BaseController<RecogLib_iOS.SelfieResult>, RecogLib_iOS.SelfieControllerAbstraction {
  weak final public var delegate: (any RecogLib_iOS.SelfieControllerDelegate)?
  public init(camera: RecogLib_iOS.Camera, view: RecogLib_iOS.CameraView, modelsUrl: Foundation.URL, language: RecogLib_iOS.SupportedLanguages = SupportedLanguages.current)
  final public func configure(configuration: RecogLib_iOS.SelfieControllerConfiguration = .default) throws
  @objc deinit
}
public struct HologramResult {
  public var hologramState: RecogLib_iOS.HologramState
}
final public class UnifiedHologramResultAdapter : RecogLib_iOS.UnifiedResult {
  final public let state: RecogLib_iOS.UnifiedState
  final public let role: RecogLib_iOS.DocumentRole?
  final public let country: RecogLib_iOS.Country?
  final public let code: RecogLib_iOS.DocumentCodes?
  final public let page: RecogLib_iOS.PageCodes?
  final public let signature: RecogLib_iOS.ImageSignature?
  public init(result: RecogLib_iOS.HologramResult)
  @objc deinit
}
extension RecogLib_iOS.HologramState {
  public func toDomain() -> RecogLib_iOS.UnifiedState
}
public enum UnifiedState {
  case notFound
  case alignCard
  case holdSteady
  case blurry
  case reflectionPresent
  case ok
  case hologram
  case dark
  case confirming
  case lookAtMe
  case turnHead
  case smile
  case badFaceAngle
  case tiltLeftAndRight
  case tiltUpAndDown
  case center
  case barcode
  case textNotReadable
  case nfc
  case reseting
  case dontSmile
  case timedOut
  case tiltLeft
  case tiltRight
  case tiltUp
  case tiltDown
  public static func == (a: RecogLib_iOS.UnifiedState, b: RecogLib_iOS.UnifiedState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class DrawingLayer : QuartzCore.CALayer {
  @objc override dynamic public func draw(in ctx: CoreGraphics.CGContext)
  public func setRenderables(_ renderables: [any RecogLib_iOS.Renderable]?)
  @objc override dynamic public init()
  @objc override dynamic public init(layer: Any)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
final public class FaceVerifierModels : RecogLib_iOS.VerifierModels {
  final public let url: Foundation.URL
  public init?(url: Foundation.URL, fileManager: Foundation.FileManager = .default)
  final public func load(onLoad: (Foundation.Data, Swift.String) -> Swift.Void)
  @objc deinit
}
extension RecogLib_iOS.DataGroupId : Swift.Equatable {}
extension RecogLib_iOS.DataGroupId : Swift.Hashable {}
extension RecogLib_iOS.DataGroupId : Swift.RawRepresentable {}
extension RecogLib_iOS.DocumentCodes : Swift.Equatable {}
extension RecogLib_iOS.DocumentCodes : Swift.Hashable {}
extension RecogLib_iOS.DocumentCodes : Swift.RawRepresentable {}
extension RecogLib_iOS.PageCodes : Swift.Equatable {}
extension RecogLib_iOS.PageCodes : Swift.Hashable {}
extension RecogLib_iOS.PageCodes : Swift.RawRepresentable {}
extension RecogLib_iOS.Country : Swift.Equatable {}
extension RecogLib_iOS.Country : Swift.Hashable {}
extension RecogLib_iOS.Country : Swift.RawRepresentable {}
extension RecogLib_iOS.DocumentRole : Swift.Equatable {}
extension RecogLib_iOS.DocumentRole : Swift.Hashable {}
extension RecogLib_iOS.DocumentRole : Swift.RawRepresentable {}
extension RecogLib_iOS.SupportedLanguages : Swift.Equatable {}
extension RecogLib_iOS.SupportedLanguages : Swift.Hashable {}
extension RecogLib_iOS.SupportedLanguages : Swift.RawRepresentable {}
extension RecogLib_iOS.DocumentVerifierState : Swift.Equatable {}
extension RecogLib_iOS.DocumentVerifierState : Swift.Hashable {}
extension RecogLib_iOS.DocumentVerifierState : Swift.RawRepresentable {}
extension RecogLib_iOS.SelfieVerifierState : Swift.Equatable {}
extension RecogLib_iOS.SelfieVerifierState : Swift.Hashable {}
extension RecogLib_iOS.SelfieVerifierState : Swift.RawRepresentable {}
extension RecogLib_iOS.HologramState : Swift.Equatable {}
extension RecogLib_iOS.HologramState : Swift.Hashable {}
extension RecogLib_iOS.HologramState : Swift.RawRepresentable {}
extension RecogLib_iOS.FaceLivenessVerifierState : Swift.Equatable {}
extension RecogLib_iOS.FaceLivenessVerifierState : Swift.Hashable {}
extension RecogLib_iOS.FaceLivenessVerifierState : Swift.RawRepresentable {}
extension RecogLib_iOS.SampleType : Swift.Equatable {}
extension RecogLib_iOS.SampleType : Swift.Hashable {}
extension RecogLib_iOS.SampleType : Swift.RawRepresentable {}
extension RecogLib_iOS.SdkVerifierType : Swift.Equatable {}
extension RecogLib_iOS.SdkVerifierType : Swift.Hashable {}
extension RecogLib_iOS.SdkVerifierType : Swift.RawRepresentable {}
extension RecogLib_iOS.SdkSignatureProblem : Swift.Equatable {}
extension RecogLib_iOS.SdkSignatureProblem : Swift.Hashable {}
extension RecogLib_iOS.SdkSignatureProblem : Swift.RawRepresentable {}
extension RecogLib_iOS.DataType : Swift.Equatable {}
extension RecogLib_iOS.DataType : Swift.Hashable {}
extension RecogLib_iOS.NfcData.NfcProtocol : Swift.Equatable {}
extension RecogLib_iOS.NfcData.NfcProtocol : Swift.Hashable {}
extension RecogLib_iOS.NfcData.NfcProtocol : Swift.RawRepresentable {}
extension RecogLib_iOS.NfcData.DGName : Swift.Equatable {}
extension RecogLib_iOS.NfcData.DGName : Swift.Hashable {}
extension RecogLib_iOS.NfcData.DGName : Swift.RawRepresentable {}
extension RecogLib_iOS.AuthenticationStatus : Swift.Equatable {}
extension RecogLib_iOS.AuthenticationStatus : Swift.Hashable {}
extension RecogLib_iOS.FaceLivenessCheckType : Swift.Equatable {}
extension RecogLib_iOS.FaceLivenessCheckType : Swift.Hashable {}
extension RecogLib_iOS.FaceLivenessCheckType : Swift.RawRepresentable {}
extension RecogLib_iOS.FaceLivenessAngle : Swift.Equatable {}
extension RecogLib_iOS.FaceLivenessAngle : Swift.Hashable {}
extension RecogLib_iOS.FaceLivenessAngle : Swift.RawRepresentable {}
extension RecogLib_iOS.RenderableType : Swift.Equatable {}
extension RecogLib_iOS.RenderableType : Swift.Hashable {}
extension RecogLib_iOS.RenderableType : Swift.RawRepresentable {}
extension RecogLib_iOS.NfcStatus : Swift.Equatable {}
extension RecogLib_iOS.NfcStatus : Swift.Hashable {}
extension RecogLib_iOS.NfcStatus : Swift.RawRepresentable {}
extension RecogLib_iOS.RenderingPriority : Swift.Equatable {}
extension RecogLib_iOS.RenderingPriority : Swift.Hashable {}
extension RecogLib_iOS.ImageFlip : Swift.Equatable {}
extension RecogLib_iOS.ImageFlip : Swift.Hashable {}
extension RecogLib_iOS.ImageFlip : Swift.RawRepresentable {}
extension RecogLib_iOS.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension RecogLib_iOS.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension RecogLib_iOS.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension RecogLib_iOS.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension RecogLib_iOS.DocTypeEnum : Swift.RawRepresentable {}
extension RecogLib_iOS.UnifiedState : Swift.Equatable {}
extension RecogLib_iOS.UnifiedState : Swift.Hashable {}

// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RecogLib_iOS
import AVFoundation
import CoreGraphics
import CoreMedia
import Foundation
@_exported import RecogLib_iOS
import Swift
import UIKit.UIImage
import UIKit
import _Concurrency
public struct FaceLivenessResult {
  public var faceLivenessState: RecogLib_iOS.FaceLivenessState
  public let signature: RecogLib_iOS.ImageSignature?
}
@_hasMissingDesignatedInitializers final public class ZenidSecurity {
  public static func getChallengeToken() -> Swift.String?
  public static func authorize(responseToken: Swift.String) -> Swift.Bool
  public static func isAuthorized() -> Swift.Bool
  @objc deinit
}
public class SelfieVerifier {
  public var language: RecogLib_iOS.SupportedLanguages
  public var showDebugInfo: Swift.Bool {
    get
    set
  }
  public init(language: RecogLib_iOS.SupportedLanguages)
  public func loadModels(_ loader: RecogLib_iOS.FaceVerifierModels)
  public func verify(buffer: CoreMedia.CMSampleBuffer, orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.SelfieResult?
  public func verifyImage(imageBuffer: CoreVideo.CVPixelBuffer, orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.SelfieResult?
  public func reset()
  public func getRenderCommands(canvasWidth: Swift.Int, canvasHeight: Swift.Int, orientation: UIKit.UIInterfaceOrientation = .portrait) -> Swift.String?
  @objc deinit
}
public class FaceLivenessVerifier {
  public var language: RecogLib_iOS.SupportedLanguages
  public var showDebugInfo: Swift.Bool {
    get
    set
  }
  public init(language: RecogLib_iOS.SupportedLanguages, settings: RecogLib_iOS.FaceLivenessVerifierSettings? = nil)
  public func loadModels(_ loader: RecogLib_iOS.FaceVerifierModels)
  public func verify(buffer: CoreMedia.CMSampleBuffer, orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.FaceLivenessResult?
  public func verifyImage(imageBuffer: CoreVideo.CVPixelBuffer, orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.FaceLivenessResult?
  public func update(settings: RecogLib_iOS.FaceLivenessVerifierSettings)
  public func getAuxiliaryInfo() -> RecogLib_iOS.FaceLivenessAuxiliaryInfo?
  public func reset()
  public func getRenderCommands(canvasWidth: Swift.Int, canvasHeight: Swift.Int, orientation: UIKit.UIInterfaceOrientation = .portrait) -> Swift.String?
  @objc deinit
}
public class DocumentVerifier {
  public var documentRole: RecogLib_iOS.DocumentRole?
  public var country: RecogLib_iOS.Country?
  public var page: RecogLib_iOS.PageCode?
  public var code: RecogLib_iOS.DocumentCode?
  final public let settings: RecogLib_iOS.DocumentVerifierSettings?
  public var documentsInput: RecogLib_iOS.DocumentsInput? {
    get
    set
  }
  public var language: RecogLib_iOS.SupportedLanguages
  public var showDebugInfo: Swift.Bool {
    get
    set
  }
  public init(role: RecogLib_iOS.DocumentRole?, country: RecogLib_iOS.Country?, page: RecogLib_iOS.PageCode?, code: RecogLib_iOS.DocumentCode?, language: RecogLib_iOS.SupportedLanguages, settings: RecogLib_iOS.DocumentVerifierSettings? = nil)
  public init(input: RecogLib_iOS.DocumentsInput, language: RecogLib_iOS.SupportedLanguages, settings: RecogLib_iOS.DocumentVerifierSettings? = nil)
  public func loadModels(_ loader: RecogLib_iOS.DocumentVerifierModels)
  public func verify(buffer: CoreMedia.CMSampleBuffer, orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.DocumentResult?
  public func verifyImage(imageBuffer: CoreVideo.CVPixelBuffer, orientation: UIKit.UIInterfaceOrientation = .portrait) -> RecogLib_iOS.DocumentResult?
  public func update(settings: RecogLib_iOS.DocumentVerifierSettings)
  public func validate(input: RecogLib_iOS.DocumentsInput) -> Swift.Bool
  public func beginHologramVerification()
  public func endHologramVerification()
  public func reset()
  public func getRenderCommands(canvasWidth: Swift.Int, canvasHeight: Swift.Int, orientation: UIKit.UIInterfaceOrientation = .portrait) -> Swift.String?
  @objc deinit
}
public protocol LoggerProtocol {
  func Error(_ message: Swift.String)
  func Warn(_ message: Swift.String)
  func Info(_ message: Swift.String)
  func Debug(_ message: Swift.String)
  func Verbose(_ message: Swift.String)
}
@_hasMissingDesignatedInitializers final public class ApplicationLogger {
  public static let shared: RecogLib_iOS.ApplicationLogger
  final public func startLogging(logger: RecogLib_iOS.LoggerProtocol)
  final public func Error(_ message: Swift.String)
  final public func Warn(_ message: Swift.String)
  final public func Info(_ message: Swift.String)
  final public func Debug(_ message: Swift.String)
  final public func Verbose(_ message: Swift.String)
  final public func disableRecognitionLogging()
  final public func enableRecognitionLogging()
  @objc deinit
}
public struct FaceLivenessVerifierSettings : Swift.Equatable {
  public let isLegacyModeEnabled: Swift.Bool
  public let maxAuxiliaryImageSize: Swift.Int
  public init(isLegacyModeEnabled: Swift.Bool = false, maxAuxiliaryImageSize: Swift.Int = 300)
  public static func == (a: RecogLib_iOS.FaceLivenessVerifierSettings, b: RecogLib_iOS.FaceLivenessVerifierSettings) -> Swift.Bool
}
public enum FaceLivenessCheckType : Swift.String, Swift.Decodable {
  case angle
  case legacyAngle
  case smile
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FaceLivenessAngle : Swift.String, Swift.Decodable {
  case left
  case top
  case right
  case down
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct FaceLivenessAuxiliaryMetadata : Swift.Decodable {
  public let type: RecogLib_iOS.FaceLivenessCheckType
  public let date: Foundation.Date
  public let angle: RecogLib_iOS.FaceLivenessAngle?
  public init(from decoder: Swift.Decoder) throws
}
public struct FaceLivenessAuxiliaryInfo {
  public let images: [Foundation.Data]
  public let metadata: [RecogLib_iOS.FaceLivenessAuxiliaryMetadata]
}
public struct DocumentVerifierSettings : Swift.Equatable {
  public let specularAcceptableScore: Swift.Int
  public let documentBlurAcceptableScore: Swift.Int
  public let timeToBlurMaxToleranceInSeconds: Swift.Int
  public let showTimer: Swift.Bool
  public let showAimingCircle: Swift.Bool
  public let drawOutline: Swift.Bool
  public let readBarcode: Swift.Bool
  public init(specularAcceptableScore: Swift.Int = 50, documentBlurAcceptableScore: Swift.Int = 50, timeToBlurMaxToleranceInSeconds: Swift.Int = 10, showTimer: Swift.Bool = false, showAimingCircle: Swift.Bool = false, drawOutline: Swift.Bool = false, readBarcode: Swift.Bool = true)
  public static func == (a: RecogLib_iOS.DocumentVerifierSettings, b: RecogLib_iOS.DocumentVerifierSettings) -> Swift.Bool
}
public enum SupportedLanguages : Swift.Int {
  case English
  case Czech
  case Polish
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RecogLib_iOS.SupportedLanguages : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum DocumentCode : Swift.Int, Swift.CaseIterable {
  case IDC1
  case IDC2
  case DRV
  case PAS
  case SK_IDC_2008plus
  case SK_DRV_2004_08_09
  case SK_DRV_2013
  case SK_DRV_2015
  case SK_PAS_2008_14
  case SK_DRV_1993
  case PL_IDC_2015
  case DE_IDC_2010
  case DE_IDC_2001
  case HR_IDC_2013_15
  case AT_IDE_2000
  case HU_IDC_2000_01_12
  case HU_IDC_2016
  case AT_IDC_2002_05_10
  case HU_ADD_2012
  case AT_PAS_2006_14
  case AT_DRV_2006
  case AT_DRV_2013
  case CZ_RES_2011_14
  case CZ_RES_2006_T
  case CZ_RES_2006_07
  case CZ_GUN_2014
  case HU_PAS_2006_12
  case HU_DRV_2012_13
  case HU_DRV_2012_B
  case EU_EHIC_2004_A
  case CZ_GUN_2017
  case CZ_RES_2020
  case PL_IDC_2019
  case IT_PAS_2006_10
  case INT_ISIC_2008
  case DE_PAS
  case DK_PAS
  case ES_PAS
  case FI_PAS
  case FR_PAS
  case GB_PAS
  case IS_PAS
  case NL_PAS
  case RO_PAS
  case SE_PAS
  case PL_PAS
  case PL_DRV_2013
  case CZ_BIRTH
  case CZ_VEHICLE_I
  case INT_ISIC_2019
  case SI_PAS
  case SI_IDC
  case SI_DRV
  case EU_EHIC_2004_B
  case PL_IDC_2001_02_13
  case IT_IDC_2016
  case HR_PAS_2009_15
  case HR_DRV_2013
  case HR_IDC_2003
  case SI_DRV_2009
  case BG_PAS_2010
  case BG_IDC_2010
  case BG_DRV_2010_13
  case HR_IDC_2021
  case AT_IDC_2021
  case DE_PAS_2007
  case DE_DRV_2013_21
  case DE_DRV_1999_01_04_11
  case FR_IDC_2021
  case FR_IDC_1988_94
  case ES_PAS_2003_06
  case ES_IDC_2015
  case ES_IDC_2006
  case IT_IDC_2004
  case RO_IDC_2001_06_09_17_21
  case NL_IDC_2014_17_21
  case BE_PAS_2014_17_19
  case BE_IDC_2013_15
  case BE_IDC_2020_21
  case GR_PAS_2020
  case PT_PAS_2006_09
  case PT_PAS_2017
  case PT_IDC_2007_08_09_15
  case SE_IDC_2012_21
  case FI_IDC_2017_21
  case IE_PAS_2006_13
  case LT_PAS_2008_09_11_19
  case LT_IDC_2009_12
  case LV_PAS_2015
  case LV_PAS_2007
  case LV_IDC_2012
  case LV_IDC_2019
  case EE_PAS_2014
  case EE_PAS_2021
  case EE_IDC_2011
  case EE_IDC_2018_21
  case CY_PAS_2010_20
  case CY_IDC_2000_08
  case CY_IDC_2015_20
  case LU_PAS_2015
  case LU_IDC_2014_21
  case LU_IDC_2008_13
  case MT_PAS_2008
  case MT_IDC_2014
  case PL_PAS_2011
  case PL_DRV_1999
  case LT_IDC_2021
  case UA_PAS_2007_15
  case UA_IDC_2017
  case EU_VIS_2019
  case UA_DRV_2016
  case UA_DRV_2005
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.DocumentCode]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.DocumentCode] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension RecogLib_iOS.DocumentCode {
  public init?(stringValue: Swift.String)
}
extension RecogLib_iOS.DocumentCode : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum PageCode : Swift.Int {
  case Front, Back
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RecogLib_iOS.PageCode : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum Country : Swift.Int, Swift.CaseIterable {
  case Cz
  case Sk
  case At
  case Hu
  case Pl
  case De
  case Hr
  case Ro
  case Ru
  case Ua
  case It
  case Dk
  case Es
  case Fi
  case Fr
  case Gb
  case Is
  case Nl
  case Se
  case Si
  case Bg
  case Be
  case Ee
  case Ie
  case Cy
  case Lt
  case Lv
  case Lu
  case Mt
  case Pt
  case Gr
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.Country]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.Country] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension RecogLib_iOS.Country : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum DocumentRole : Swift.Int, Swift.CaseIterable {
  case Idc
  case Pas
  case Drv
  case Res
  case Gun
  case Hic
  case Vis
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RecogLib_iOS.DocumentRole]
  public typealias RawValue = Swift.Int
  public static var allCases: [RecogLib_iOS.DocumentRole] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension RecogLib_iOS.DocumentRole : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum DocumentState : Swift.Int {
  case NoMatchFound
  case AlignCard
  case HoldSteady
  case Blurry
  case ReflectionPresent
  case Ok
  case Hologram
  case Dark
  case Barcode
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RecogLib_iOS.DocumentState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum HologramState : Swift.Int {
  case center
  case tiltLeftAndRight
  case tiltUpAndDown
  case ok
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RecogLib_iOS.HologramState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum FaceLivenessState : Swift.Int {
  case LookAtMe
  case TurnHead
  case Smile
  case Ok
  case blurry
  case dark
  case holdStill
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RecogLib_iOS.FaceLivenessState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum SelfieState : Swift.Int {
  case Ok
  case NoFaceFound
  case Blurry
  case Dark
  case ConfirmingFace
  case badFaceAngle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RecogLib_iOS.SelfieState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public class DocumentsInput {
  public init(documents: [RecogLib_iOS.Document])
  @objc deinit
}
public struct DocumentResult {
  public var state: RecogLib_iOS.DocumentState
  public var role: RecogLib_iOS.DocumentRole?
  public var country: RecogLib_iOS.Country?
  public var code: RecogLib_iOS.DocumentCode?
  public var page: RecogLib_iOS.PageCode?
  public var hologremState: RecogLib_iOS.HologramState?
  public var signature: RecogLib_iOS.ImageSignature?
}
final public class DocumentVerifierModels : RecogLib_iOS.VerifierModels {
  final public let url: Foundation.URL
  public init?(url: Foundation.URL, fileManager: Foundation.FileManager = .default)
  final public func load(onLoad: (Foundation.Data) -> Swift.Void)
  @objc deinit
}
public protocol VerifierModels {
  var url: Foundation.URL { get }
  func load(onLoad: (Foundation.Data) -> Swift.Void)
}
public struct Document : Swift.Comparable {
  public static func < (lhs: RecogLib_iOS.Document, rhs: RecogLib_iOS.Document) -> Swift.Bool
  public let role: RecogLib_iOS.DocumentRole?
  public let country: RecogLib_iOS.Country?
  public let page: RecogLib_iOS.PageCode?
  public let code: RecogLib_iOS.DocumentCode?
  public init(role: RecogLib_iOS.DocumentRole?, country: RecogLib_iOS.Country?, page: RecogLib_iOS.PageCode?, code: RecogLib_iOS.DocumentCode?)
  public static func == (a: RecogLib_iOS.Document, b: RecogLib_iOS.Document) -> Swift.Bool
}
public struct ImageSignature {
  public let image: Foundation.Data
  public let signature: Swift.String
}
public struct SelfieResult {
  public var selfieState: RecogLib_iOS.SelfieState
  public let signature: RecogLib_iOS.ImageSignature?
}
public struct HologramResult {
  public var hologramState: RecogLib_iOS.HologramState
}
final public class FaceVerifierModels : RecogLib_iOS.VerifierModels {
  final public let url: Foundation.URL
  public init?(url: Foundation.URL, fileManager: Foundation.FileManager = .default)
  final public func load(onLoad: (Foundation.Data) -> Swift.Void)
  @objc deinit
}
extension RecogLib_iOS.FaceLivenessCheckType : Swift.Equatable {}
extension RecogLib_iOS.FaceLivenessCheckType : Swift.Hashable {}
extension RecogLib_iOS.FaceLivenessCheckType : Swift.RawRepresentable {}
extension RecogLib_iOS.FaceLivenessAngle : Swift.Equatable {}
extension RecogLib_iOS.FaceLivenessAngle : Swift.Hashable {}
extension RecogLib_iOS.FaceLivenessAngle : Swift.RawRepresentable {}
extension RecogLib_iOS.SupportedLanguages : Swift.Equatable {}
extension RecogLib_iOS.SupportedLanguages : Swift.Hashable {}
extension RecogLib_iOS.SupportedLanguages : Swift.RawRepresentable {}
extension RecogLib_iOS.DocumentCode : Swift.Equatable {}
extension RecogLib_iOS.DocumentCode : Swift.Hashable {}
extension RecogLib_iOS.DocumentCode : Swift.RawRepresentable {}
extension RecogLib_iOS.PageCode : Swift.Equatable {}
extension RecogLib_iOS.PageCode : Swift.Hashable {}
extension RecogLib_iOS.PageCode : Swift.RawRepresentable {}
extension RecogLib_iOS.Country : Swift.Equatable {}
extension RecogLib_iOS.Country : Swift.Hashable {}
extension RecogLib_iOS.Country : Swift.RawRepresentable {}
extension RecogLib_iOS.DocumentRole : Swift.Equatable {}
extension RecogLib_iOS.DocumentRole : Swift.Hashable {}
extension RecogLib_iOS.DocumentRole : Swift.RawRepresentable {}
extension RecogLib_iOS.DocumentState : Swift.Equatable {}
extension RecogLib_iOS.DocumentState : Swift.Hashable {}
extension RecogLib_iOS.DocumentState : Swift.RawRepresentable {}
extension RecogLib_iOS.HologramState : Swift.Equatable {}
extension RecogLib_iOS.HologramState : Swift.Hashable {}
extension RecogLib_iOS.HologramState : Swift.RawRepresentable {}
extension RecogLib_iOS.FaceLivenessState : Swift.Equatable {}
extension RecogLib_iOS.FaceLivenessState : Swift.Hashable {}
extension RecogLib_iOS.FaceLivenessState : Swift.RawRepresentable {}
extension RecogLib_iOS.SelfieState : Swift.Equatable {}
extension RecogLib_iOS.SelfieState : Swift.Hashable {}
extension RecogLib_iOS.SelfieState : Swift.RawRepresentable {}
